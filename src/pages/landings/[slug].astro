---
import flattenAttributes from '../../utils/flattenAttributes';
import Slider  from "../../components/Slider/Type1.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import StepSection from "../../components/Step/Section.astro";
import CategoriesSection from "../../components/Category/Section.astro";
import FeaturesSection from "../../components/Features/Section.astro";
import Gallery from "../../components/Gallery/Wrap.astro";
import Type1 from '../../components/Banners/Type1.astro';
import Type2 from '../../components/Banners/Type2.astro';
import Type3 from '../../components/Banners/Type3.astro';
import Discount from '../../components/Banners/Discount.astro';
import SEOBlock from '../../components/SEOBlock.astro';
import ImageText from '../../components/Banners/ImageText.astro';
import CustomBanner from '../../components/Banners/Custom.astro';

export function getStaticPaths() {
  return [
    {params: {slug: 'travel'}},
    {params: {slug: 'weeding'}},
    {params: {slug: 'bonusy-za-otzyvy'}}
  ];
}

const {slug} =  Astro.params;
const response = await fetch(`${import.meta.env.HOST_API}/landing-pages?filters[slug]=${slug}&populate[content][populate]=*`).then(x  => x.json());
const page = flattenAttributes(response.data[0]);
const selfAssembly = await fetch(`${import.meta.env.HOST_API}/self-assembly?populate[stepsBlock][populate][steps]=*`).then(x  => x.json());
const selfAssemblyData = flattenAttributes(selfAssembly.data);
const featureFotobookForYou = await fetch(`${import.meta.env.HOST_API}/fotobook-for-you?populate[featuresBlock][populate][features]=*`).then(x  => x.json());
const featureFotobookForYouData = flattenAttributes(featureFotobookForYou.data);
---

<BaseLayout title={page.title}>
        <div class="mpp-landing-page container">
            {
                page?.content?.map( block => 
                    <>
                        {(block.__component === "ui-slider.banner" && !block.width ) && <ImageText {...block}  />}
                    </>
                    <>
                        {
                            // block.__component === "ui-elements.categories-block" && <CategoriesSection title={block.title} categories={block.categories} />
                        }
                    </>
                    <>
                        {
                            // block.__component === "ui-elements.categories-block" && <CategoriesSection title={block.title} categories={block.categories} />
                        }
                    </>
                    <>
                        {(block.__component === "ui-slider.banner" && block?.width !== "") && <CustomBanner {...block}  />}
                    </>
                    <>
                        {
                            block.__component === "ui-slider.gallery" && <Gallery {...block} />
                        }
                    </>
                    <>
                        {
                            block.__component === "seo.seo-block" && <SEOBlock {...block} />
                        }
                    </>
                )
            }
            <!-- {
                <StepSection data={selfAssemblyData.stepsBlock} />
                <FeaturesSection {...featureFotobookForYouData.featuresBlock} />
                <Type1 />
            }
            {
                <Discount />
            } -->
        </div>  
    <script src="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.min.js"></script>
</BaseLayout>


<style lang="scss" is:global>
    .mpp-landing-page {

        display: flex;
        flex-direction: column;
        gap: clamp(1.313rem, -0.616rem + 4.018vw, 1.875rem);

        & :is(ul, ol, li) {
            list-style-type: none;
            padding: 0;
        }

        & :is(h1, h2, h3, h4) {
            padding: 0;
        }

        & h2 {
            font-size: 1.25rem;
            margin: 0 0 1em;
        }
    }

    .splide__pagination {
        bottom: 1rem;
    }

    .splide__pagination__page {
        opacity: 1;

        background-color: rgba(255,255,255,.5);

        &.is-active {
            background-color: var(--whiteColor);
            transform: scale(1);
        }
    }

    .btn {
        color: var(--whiteColor);
        font-weight: 700;
        &:hover {
            background-color: var(--whiteColor);
            color: var(--primaryColor);
        }
    }
</style>

<script>
    const imageObserver = new IntersectionObserver(
    (entries, observer) => {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                if(entry.target.hasAttribute("data-src")) {
                    entry.target.src = entry.target.dataset.src;
                    observer.unobserve(entry.target)
                }
                if(entry.target.hasAttribute("data-bg-src")) {
                    entry.target.style.backgroundImage = `url('${entry.target.dataset.bgSrc}')`;
                    observer.unobserve(entry.target);
                }
            }
        })
    },
    {
        rootMargin: "0px"
    }
)
document.querySelectorAll("div, img, a, iframe").forEach((image) => imageObserver.observe(image))
</script>

